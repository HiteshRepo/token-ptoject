// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"github.com/hiteshrepo/token_project/internal/app/server/app"
	"github.com/hiteshrepo/token_project/internal/app/server/grpc"
	"github.com/hiteshrepo/token_project/internal/app/server/handler"
	"github.com/hiteshrepo/token_project/internal/app/server/repository"
	"github.com/hiteshrepo/token_project/internal/app/server/service"
	"github.com/hiteshrepo/token_project/internal/pkg/config"
	"github.com/hiteshrepo/token_project/internal/pkg/mapper"
)

// Injectors from wire.go:

func InitializeApp() (*app.App, error) {
	appConfig, err := config.ProvideAppConfig()
	if err != nil {
		return nil, err
	}
	serverConfig := appConfig.ServerConfig
	v := grpc.ProvideGrpcServerOptions(serverConfig)
	server := grpc.ProvideServer(v...)
	listener, err := grpc.ProvideListener(serverConfig)
	if err != nil {
		return nil, err
	}
	tokenRepository := repository.ProvideTokenRepository()
	tokenService := service.ProvideTokenService(tokenRepository)
	mapperMapper := mapper.ProvideMapper()
	tokenHandler := handler.ProvideTokenHandler(tokenService, mapperMapper)
	appApp := &app.App{
		Server:      server,
		Listener:    listener,
		TickHandler: tokenHandler,
	}
	return appApp, nil
}

// wire.go:

var configSet = wire.NewSet(config.ProvideAppConfig, wire.FieldsOf(new(config.AppConfig), "ServerConfig"))

var grpcSet = wire.NewSet(grpc.ProvideListener, grpc.ProvideGrpcServerOptions, grpc.ProvideServer)

var repoSet = wire.NewSet(repository.ProvideTokenRepository)

var serviceSet = wire.NewSet(service.ProvideTokenService)

var handlerSet = wire.NewSet(handler.ProvideTokenHandler)
